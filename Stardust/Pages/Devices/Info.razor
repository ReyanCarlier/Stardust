@page "/device/{LocalIP}"

@using Microsoft.Graph.Beta.Models;
@using Microsoft.Graph.Beta;
@using Microsoft.Kiota.Abstractions;
@using Newtonsoft.Json;
@using Stardust.Database.Data;
@using Stardust.Nmap;
@using Stardust.Nmap.Class
@using Stardust.Nmap.Enums;
@using System.Net;
@using System.Xml;
@using static Microsoft.Graph.Beta.DeviceManagement.ManagedDevices.Item.Users.UsersRequestBuilder;
@using Stardust.GraphWrapper;
@using Stardust.Pages.TodoTask;

<AuthorizeView>
    <MudContainer Class="mt-8 px-8" MaxWidth="MaxWidth.False">
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Elevation="4" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                    <MudIcon Icon="@Icons.Material.Filled.BroadcastOnHome" Color="@serviceColor" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
                    <div>
                        <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Hostname</MudText>
                        <MudText Typo="Typo.h5">@detectedDevice.Hostname</MudText>
                    </div>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Elevation="4" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                    <MudIcon Icon="@Icons.Material.Filled.NetworkWifi" Color="@serviceColor" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
                    <div>
                        <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">IP</MudText>
                        <MudText Typo="Typo.h5">@detectedDevice.LocalIP</MudText>
                    </div>
                </MudPaper>
            </MudItem>
            <MudItem xs="6" sm="6" md="2">
                <MudPaper Elevation="4" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                    <MudIcon Icon="@Icons.Material.Filled.Shield" Color="@firewallColor" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
                    <div>
                        <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Firewall</MudText>
                        @if (detectedDevice.BehindFirewall == null)
                        {
                            <MudText Typo="Typo.h5">N/A</MudText>
                        }
                        else if (detectedDevice.BehindFirewall == true)
                        {
                            <MudText Typo="Typo.h5">ON</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.h5">OFF</MudText>
                        }
                    </div>
                </MudPaper>
            </MudItem>
            @if (GraphUser != null && GraphUser.Id != null)
            {
            <MudItem xs="12" sm="6" md="4">
                <MudPaper Elevation="4" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                    <MudIcon Icon="@Icons.Material.Filled.SupervisedUserCircle" Color="Color.Success" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
                    <div>
                        <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Owner</MudText>
                        <MudLink Href="@URI" Typo="Typo.h5">@GraphUser.DisplayName</MudLink>
                    </div>
                </MudPaper>
            </MudItem>                
            }
        </MudGrid>
        @if (!VulnMode)
        {
        <MudGrid>
            <MudItem xs="6" sm="3" md="2">
                <MudPaper Elevation="4" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                    <MudIcon Icon="@Icons.Material.Filled.LockOpen" Color="Color.Secondary" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
                    <div>
                        <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Opened Ports</MudText>
                    @if (detectedDevice.OpenedPorts == null)
                    {
                        <MudText Typo="Typo.h5">N/A</MudText>
                    }
                    else if (detectedDevice.OpenedPorts.Count() == 0)
                    {
                        <MudText Typo="Typo.h5">@detectedDevice.OpenedPorts.Count()</MudText>
                    }
                    else
                    {
                        <div>
                            <MudText Typo="Typo.h5">@detectedDevice.OpenedPorts.Count() <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" OnClick="(() => ShowOpenedPorts(detectedDevice.OpenedPorts))" /></MudText>
                            
                        </div>
                    }
                    </div>
                </MudPaper>
            </MudItem>
            @* Filtered Ports *@
            <MudItem xs="6" sm="3" md="2">
                <MudPaper Elevation="4" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                    <MudIcon Icon="@Icons.Material.Filled.Shield" Color="Color.Primary" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
                    <div>
                        <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Filtered Ports</MudText>
                        @if (detectedDevice.FilteredPorts == null)
                        {
                            <MudText Typo="Typo.h5">N/A</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.h5">@detectedDevice.FilteredPorts.Count()</MudText>
                        }
                    </div>
                </MudPaper>
            </MudItem>
            @* Unknown Ports *@
            <MudItem xs="6" sm="3" md="2">
                <MudPaper Elevation="4" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                    <MudIcon Icon="@Icons.Material.Filled.QuestionMark" Color="Color.Warning" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
                    <div>
                        <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Unknown Ports</MudText>
                        @if (detectedDevice.OpenedFilteredPorts == null)
                        {
                            <MudText Typo="Typo.h5">N/A</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.h5">@detectedDevice.OpenedFilteredPorts.Count()</MudText>
                        }
                    </div>
                </MudPaper>
            </MudItem>
            @* Closed Ports *@
            <MudItem xs="6" sm="3" md="2">
                <MudPaper Elevation="4" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                    <MudIcon Icon="@Icons.Material.Filled.Lock" Color="Color.Success" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
                    <div>
                        <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Closed Ports</MudText>
                        @if (detectedDevice.ClosedPorts == null)
                        {
                            <MudText Typo="Typo.h5">N/A</MudText>
                        }
                        else
                        {
                            <MudText Typo="Typo.h5">@detectedDevice.ClosedPorts.Count()</MudText>
                        }
                    </div>
                </MudPaper>
            </MudItem>
            @* Last Report *@
            <MudItem xs="12" sm="6" md="4">
                <MudPaper Elevation="4" Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                    @if (HistoricalReports?.Count > 0)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Color="Color.Info" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
                        <div>
                            @if (_isHistoricalReport) {
                                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Watching Report from :</MudText>
                                <MudText Typo="Typo.h5">@SelectedReport?.CreatedAt</MudText>
                            }
                            else
                            {
                                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Last Report</MudText>
                                    @foreach (Stardust.Database.Data.Report? report in HistoricalReports)
                                    {
                                        if (report == null)
                                            continue;
                                        if (LastReport == null || report.CreatedAt > LastReport?.CreatedAt || LastReport?.CreatedAt == null)
                                        {
                                            LastReport = report;
                                            LastReportDate = (DateTime?)report.CreatedAt != null ? (DateTime)report.CreatedAt : DateTime.Now;
                                        }
                                    }
                                <MudText Typo="Typo.h5">@LastReportDate.ToString("dd/MM/yyyy HH:mm:ss")</MudText>
                            }
                        </div>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Color="Color.Secondary" Class="mx-4" Style="width:54px; height:54px;"></MudIcon>
                        <div>
                            <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Last Report</MudText>
                            <MudText Typo="Typo.h5">Never scanned yet.</MudText>
                        </div>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
        @* Scanner *@
        <MudGrid Class="mt-4 mb-4" Justify="Justify.Center">
            <MudButton StartIcon="@Icons.Material.Filled.BugReport" Size="Size.Large" Class="m1-auto" Disabled="@_buttonDisabled" Variant="Variant.Filled" Color="Color.Primary" @onclick="PerformQuickScan">
            @if (detectedDevice.IsOnline == false)
            {
                <MudText Class="ms-2">OFFLINE</MudText>
            }
            else if (_processing)
            {

                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Please wait...</MudText>
            }
            else
            {
                <MudText Class="ms-2">Scan</MudText>
            }
            </MudButton>
            @if (!VulnMode)
            {
                @if (SelectedReport == null && detectedDevice.IsOnline != null && detectedDevice.IsOnline == true && detectedDevice.OpenedPorts.Count() > 0)
                {
                    <MudButton StartIcon="@Icons.Custom.Uncategorized.BioHazard" Size="Size.Large" Class="m1-auto" Variant="Variant.Filled" Color="Color.Secondary" @onclick="SwitchMode">
                        <MudText>VulnMode [WIP]</MudText>
                    </MudButton>
                }
                else
                {
                    <MudButton StartIcon="@Icons.Custom.Uncategorized.BioHazard" Size="Size.Large" Class="m1-auto" Disabled="true" Variant="Variant.Filled" Color="Color.Secondary">
                        <MudText>VulnMode [WIP]</MudText>
                    </MudButton>
                }
            }

            else
            {
                <MudButton StartIcon="@Icons.Material.Filled.BugReport" Size="Size.Large" Class="m1-auto" Variant="Variant.Filled" Color="Color.Primary" @onclick="SwitchMode">
                    <MudText>ScanMode</MudText>
                </MudButton>
            }
        </MudGrid>
        <MudGrid>
            @* Task Area *@
            <MudItem xs="12" sm="6" md="6">
                <MudGrid>
                    <MudItem xs="12" sm="12" md="12">
                            <MudPaper Elevation="4" Class="d-flex flex-row">
                                <MudTable Dense="true" Context="task" Style="width: 100vh;" Items="@taskTodos" FixedHeader="true" Hover="true" Height="20vh">
                                    <HeaderContent>
                                        <MudTh>Status</MudTh>
                                        <MudTh>Emergency</MudTh>
                                        <MudTh>Due</MudTh>
                                        <MudTh>Edit</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Status">@task.Status</MudTd>
                                        <MudTd DataLabel="Emergency">@task.Emergency</MudTd>
                                        <MudTd DataLabel="Due">@task.DueDate</MudTd>
                                        <MudTd DataLabel="Edit"><MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(()=>EditTask(@task))"></MudIconButton></MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="12" md="12">
                            <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Class="m1-auto" Variant="Variant.Filled" Color="Color.Primary" @onclick="(() => AddTask(null, machine?.Id, GraphUser))">
                            <MudText>Add Task</MudText>
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudItem>
            @* Reports Area *@
            <MudItem xs="12" sm="6" md="6">
                <MudPaper Elevation="4" Class="d-flex flex-row">
                    <MudTable Dense="true" Context="historicalReport" Style="width: 100vh;" Items="@HistoricalReports" FixedHeader="true" Hover="true" Height="20vh">
                        <HeaderContent>
                            <MudTh>Scan Date</MudTh>
                            <MudTh>Load Scan</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Date">@historicalReport?.CreatedAt</MudTd>
                            <MudTd DataLabel="Scan"><MudIconButton Icon="@Icons.Material.Filled.WifiFind" Color="Color.Primary" OnClick="@(()=>LoadReport(@historicalReport?.Id))"></MudIconButton></MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
            @if (data != null)
            {
            <MudItem xs="12" sm="3" md="2">
                <MudPaper Elevation="4" Class="d-flex flex-row">
                    <MudChart ChartType="ChartType.Donut" Width="15vh" Height="15vh" InputData="@data" InputLabels="@labels">
                    <CustomGraphics>
                    <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Storage</text>
                    <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@dataPercent %</text>
                    </CustomGraphics>
                    </MudChart>
                </MudPaper>
            </MudItem>
            }
        </MudGrid>
        }
        else
        {
            
        }
    </MudContainer>
</AuthorizeView>

@code {
    [Parameter]
    public string LocalIP { get; set; } = "";
    string URI = "";
    public bool _isHistoricalReport { get; set; } = false;
    public bool VulnMode { get; set; } = false;
    public List<string> ResultLines { get; set; } = new();
    public List<string> ErrorLines { get; set; } = new();
    public DateTime LastReportDate { get; set; } = new();
    public Stardust.Database.Data.Report? LastReport { get; set; } = new();
    public Stardust.Database.Data.Report? SelectedReport { get; set; } = null;
    public List<Stardust.Database.Data.Report> HistoricalReports { get; set; } = new();
    public List<TaskTodo>? taskTodos { get; set; } = new();
    public DetectedDevice detectedDevice { get; set; } = new();
    public DetectedDevice detectedDeviceCopy { get; set; } = new();
    public PortScanService service = new();
    public XmlDocument? ScanReport { get; set; } = null;
    public MudBlazor.Color firewallColor { get; set; } = MudBlazor.Color.Primary;
    public MudBlazor.Color serviceColor { get; set; } = MudBlazor.Color.Secondary;
    public IPAddress? iPAddress { get; set; }
    public bool _buttonDisabled { get; set; } = false;
    public Machine? machine;
    public bool _processing { get; set; } = false;
    public Microsoft.Graph.Beta.Models.User? GraphUser { get; set; } = new();
    public double[]? data = null;
    public double? dataPercent = null;
    public string[] labels = { "Used Storage", "Free Storage" };
    public ManagedDevice? ManagedDevice;
    public async Task EditTask(TaskTodo? task)
    {
        if (task == null)
            return;
        var parameters = new DialogParameters<TaskTodoEdit> { { x => x.task, task } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<TaskTodoEdit>("Edit Task", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            taskTodos = await StardustCRUD.GetTaskTodoByDeviceIdAsync(machine?.Id);
            StateHasChanged();
        }
    }

    public async Task ShowOpenedPorts(Dictionary<int, string> openedPorts)
    {
        if (openedPorts == null)
            return;
        foreach (var port in openedPorts)
        {
            if (port.Value == "N/A")
                openedPorts[port.Key] = "UnknownService";
        }
        var parameters = new DialogParameters<Components.Dialog> { { "Message", string.Join(", ", openedPorts) } };
        var options = new DialogOptions { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<Components.Dialog>("Opened Ports", parameters, options);
        var result = await dialog.Result;
    }

    public async Task AddTask(TaskTodo? task, int? deviceId, User? graphUser)
    {
        if (deviceId == null)
            return;
        if (task == null)
            task = new();
        task.DeviceId = deviceId;
        List<TaskTodo>? allTasks = await StardustCRUD.GetAllTasksTodoAsync();
        if (allTasks == null)
            task.Id = 0;
        else
            task.Id = allTasks.Count() + 1;
        task.UserId = graphUser?.Id;
        task.ReportId = LastReport?.Id;
        var parameters = new DialogParameters<TaskTodoAdd> { { x => x.task, task } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<TaskTodoAdd>("Add Task", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            taskTodos = await StardustCRUD.GetTaskTodoByDeviceIdAsync(deviceId);
            StateHasChanged();
        }
    }

    private void SwitchMode()
    {
        VulnMode = !VulnMode;
        detectedDevice = detectedDeviceCopy;
        StateHasChanged();
    }

    private async Task Scan(bool full)
    {
        if (iPAddress == null)
            return;
        if (full)
            await service.RunNmapScanPortsRangeAsync(ScanMethod.None, iPAddress, 1, 65535);
        else
            await service.RunNmapScanSinglePortAsync(ScanMethod.None, iPAddress, 0);
        ResultLines.Clear();
        ErrorLines.Clear();
        ResultLines = service.GetResultLines();
        ErrorLines = service.GetErrorLines();
        string rawXML = string.Join(string.Empty, ResultLines);
        if (rawXML == "")
            return;
        if (ScanReport == null)
            ScanReport = new();
        ScanReport.LoadXml(rawXML);
        detectedDevice.ClosedPorts.Clear();
        detectedDevice.OpenedPorts.Clear();
        detectedDevice.FilteredPorts.Clear();
    }

    private void ParseFiltered()
    {
        XmlNodeList? portNodes = ScanReport?.SelectNodes("//port");
        if (portNodes != null)
        {
            foreach (XmlNode portNode in portNodes)
            {
                string? portState = portNode?.SelectSingleNode("state/@state")?.InnerText;
                if (portState == "open|filtered")
                {
                    string? portId = portNode?.Attributes?["portid"]?.Value;
                    string? serviceName = portNode?.SelectSingleNode("service/@name")?.InnerText;
                    if (serviceName == null)
                        serviceName = "N/A";
                    detectedDevice.OpenedFilteredPorts.Add(Convert.ToInt32(portId), serviceName);
                }
                else if (portState == "open")
                {
                    string? portId = portNode?.Attributes?["portid"]?.Value;
                    string? serviceName = portNode?.SelectSingleNode("service/@name")?.InnerText;
                    if (serviceName == null)
                        serviceName = "N/A";
                    detectedDevice.OpenedPorts.Add(Convert.ToInt32(portId), serviceName);
                    if (detectedDevice.OpenedFilteredPorts.ContainsKey(Convert.ToInt32(portId)))
                        detectedDevice.OpenedFilteredPorts.Remove(Convert.ToInt32(portId));
                }
                else if (portState == "filtered")
                {
                    string? portId = portNode?.Attributes?["portid"]?.Value;
                    detectedDevice.FilteredPorts.Add(Convert.ToInt32(portId));
                }
            }
        }
    }

    private void ParseClosed()
    {
        XmlNodeList? stateNodes = ScanReport?.SelectNodes("//extraports");
        if (stateNodes == null)
            return;

        foreach (XmlNode stateNode in stateNodes)
        {
            string? state = stateNode.Attributes?["state"]?.Value;

            if (string.IsNullOrEmpty(state))
                continue;

            XmlNode? extraReasonsNode = stateNode.SelectSingleNode("extrareasons");
            string? closedPortRanges = extraReasonsNode?.Attributes?["ports"]?.Value;

            if (string.IsNullOrEmpty(closedPortRanges))
                continue;

            string[]? ranges = closedPortRanges.Split(',');
            foreach (var range in ranges)
            {
                if (range.Contains("-"))
                {
                    string[] tokens = range.Split('-');
                    int start = int.Parse(tokens[0]);
                    int end = int.Parse(tokens[1]);
                    for (int i = start; i <= end; i++)
                    {
                        AddPortToDetectedDevice(state, i);
                    }
                }
                else
                {
                    AddPortToDetectedDevice(state, int.Parse(range));
                }
            }
        }
    }

    private void AddPortToDetectedDevice(string? state, int port)
    {
        if (state == "closed")
        {
            detectedDevice.ClosedPorts.Add(port);
        }
        else if (state == "filtered")
        {
            detectedDevice.FilteredPorts.Add(port);
        }
    }

    private async void ParseOpenedFromFiltered()
    {
        if (iPAddress == null)
            return;
        foreach (var port in detectedDevice.OpenedFilteredPorts)
        {
            await service.RunNmapScanSinglePortAsync(ScanMethod.TCPConnect, iPAddress, port.Key);
            ResultLines.Clear();
            ErrorLines.Clear();
            ResultLines = service.GetResultLines();
            ErrorLines = service.GetErrorLines();

            string rawXML = string.Join(string.Empty, ResultLines);
            if (rawXML == "")
                return;
            if (ScanReport == null)
                ScanReport = new();
            ScanReport.LoadXml(rawXML);
            ParseFiltered();
        }
    }

    private async Task PerformFullScan()
    {
        _buttonDisabled = true;
        _processing = true;
        await Scan(full: true);
        ContinueScan();
        _buttonDisabled = false;
        _processing = false;
    }

    private async Task PerformQuickScan()
    {
        _buttonDisabled = true;
        _processing = true;
        await Scan(full: false);
        ContinueScan();
        _buttonDisabled = false;
        _processing = false;
    }

    private void LoadReport(int? id)
    {
        if (HistoricalReports == null || id == null)
            return;
        foreach (Stardust.Database.Data.Report? report in HistoricalReports)
        {
            if (report == null)
                continue;
            if (report.Id == id)
            {
                _isHistoricalReport = true;
                ResultLines.Clear();
                ErrorLines.Clear();
                detectedDevice.ClosedPorts.Clear();
                detectedDevice.OpenedPorts.Clear();
                detectedDevice.FilteredPorts.Clear();

                List<string> portsToParse = new();
                if (report?.ClosedPorts != null && report.ClosedPorts.Count() > 0)
                {
                    portsToParse.AddRange(report.ClosedPorts.Split(','));
                    if (portsToParse.Count() > 0)
                    {
                        foreach (string port in portsToParse)
                        {
                            detectedDevice.ClosedPorts.Add(Convert.ToInt32(port));
                        }
                    }
                }

                portsToParse.Clear();
                if (report?.FilteredPorts != null && report.FilteredPorts.Count() > 0)
                {
                    portsToParse.AddRange(report.FilteredPorts.Split(','));
                    if (portsToParse.Count() > 0)
                    {
                        foreach (string port in portsToParse)
                        {
                            detectedDevice.FilteredPorts.Add(Convert.ToInt32(port));
                        }
                    }
                }

                if (report?.OpenPorts != null && report.OpenPorts.Count() > 0)
                {
                    portsToParse.Clear();
                    portsToParse.AddRange(report.OpenPorts.Split(','));
                    if (portsToParse.Count() > 0)
                    {
                        foreach (string port in portsToParse)
                        {
                            detectedDevice.OpenedPorts.Add(Convert.ToInt32(port), "N/A");
                        }
                    }
                }

                firewallColor = detectedDevice.FilteredPorts.Count() > 0 ? Color.Success : Color.Secondary;
                detectedDevice.BehindFirewall = detectedDevice.FilteredPorts.Count() > 0;
                serviceColor = Color.Warning;
                SelectedReport = report;
                StateHasChanged();
                return;
            }
        }
    }

    private async void ContinueScan()
    {
        ParseFiltered();
        ParseClosed();
        ParseOpenedFromFiltered();

        if (detectedDevice.FilteredPorts.Count() > 0)
        {
            detectedDevice.BehindFirewall = true;
            firewallColor = Color.Success;
        }
        else if (detectedDevice.OpenedPorts.Count() > 0)
        {
            detectedDevice.BehindFirewall = false;
            firewallColor = Color.Secondary;
        }
        Machine? machine = await StardustCRUD.GetMachineByHostnameAsync(detectedDevice?.Hostname);
        if (machine == null || machine.Id == null || detectedDevice == null)
            return;
        detectedDeviceCopy = detectedDevice;
        List<Stardust.Database.Data.Report> reports = await StardustCRUD.GetReportsAsync();
        DateTime datetime = DateTime.Now;
        Stardust.Database.Data.Report report = new(reports.Count + 1, type: 1, content: "", closedports: string.Join(",", detectedDevice.ClosedPorts), filteredports: string.Join(",", detectedDevice.FilteredPorts), openedports: string.Join(",", detectedDevice.OpenedPorts.Keys), machineid: (int)machine.Id, createdat: datetime, userId: GraphUser?.Id);
        await StardustCRUD.CreateReportAsync(report);
        HistoricalReports = await StardustCRUD.GetReportsByMachineHostname(detectedDevice.Hostname);
        machine.MacAddress = detectedDevice?.MACAddress;
        machine.LastIp = detectedDevice?.LocalIP;
        machine.Vendor = detectedDevice?.Vendor;
        machine.LastScan = datetime;
        serviceColor = Color.Success;
        await StardustCRUD.UpdateMachineAsync(machine);
        StateHasChanged();
    }

    private async Task GetDatas()
    {
        if (iPAddress == null)
            return;
        await service.RunNmapScanSinglePortAsync(ScanMethod.NoPort, iPAddress, 0);

        ResultLines.Clear();
        ErrorLines.Clear();
        ResultLines = service.GetResultLines();
        ErrorLines = service.GetErrorLines();
        string rawXML = string.Join(string.Empty, ResultLines);
        if (rawXML == "")
            return;
        if (ScanReport == null)
            ScanReport = new();
        ScanReport.LoadXml(rawXML);

        XmlNode? hostnameNode = ScanReport?.SelectSingleNode("//host/hostnames/hostname")?.Attributes?["name"];
        XmlNode? macNode = ScanReport?.SelectSingleNode("//host/address")?.NextSibling?.Attributes?["addr"];
        XmlNode? vendorNode = ScanReport?.SelectSingleNode("//host/address")?.NextSibling?.Attributes?["vendor"];
        detectedDevice.Hostname = hostnameNode?.Value != null ? hostnameNode.Value : "N/A";
        detectedDevice.MACAddress = macNode?.Value != null ? macNode.Value : "N/A";
        detectedDevice.Vendor = vendorNode?.Value != null ? vendorNode.Value : "N/A";
    }

    private async Task GetStatus()
    {
        if (iPAddress == null)
            return;
        await service.RunNmapScanSinglePortAsync(ScanMethod.SimplePing, iPAddress, 0);
        ResultLines = service.GetResultLines();
        ErrorLines = service.GetErrorLines();
        string rawXML = string.Join(string.Empty, ResultLines);
        if (rawXML == "")
        {
            detectedDevice.IsOnline = null;
            serviceColor = MudBlazor.Color.Warning;
            return;
        }
        ScanReport = new();
        ScanReport.LoadXml(rawXML);
        detectedDevice.IsOnline = ScanReport?.SelectSingleNode("//hosts")?.Attributes?["up"]?.Value == "1";
        if (detectedDevice.IsOnline != true)
            _buttonDisabled = true;
        serviceColor = detectedDevice.IsOnline == true ? MudBlazor.Color.Success : MudBlazor.Color.Secondary;
    }

    private async Task GetLastReports(string? hostname)
    {
        if (hostname == null)
            return;
        HistoricalReports = await StardustCRUD.GetReportsByMachineHostname(hostname);
    }

    private async Task DetectMachine()
    {
        if (detectedDevice.LocalIP == null || detectedDevice.Hostname == null || detectedDevice.Hostname == "N/A")
            return;
        Machine? machine = await StardustCRUD.GetMachineByHostnameAsync(detectedDevice.Hostname);
        List<Machine>? machines = await StardustCRUD.GetMachinesAsync();
        if (machine == null)
        {
            machine = new();
            machine.Id = machines != null ? machines.Count() + 1 : 1;
            machine.Hostname = detectedDevice.Hostname;
            machine.LastIp = detectedDevice.LocalIP;
            machine.MacAddress = detectedDevice.MACAddress;
            machine.Vendor = detectedDevice.Vendor;
            await StardustCRUD.CreateMachineAsync(machine);
        }
        else
        {
            machine.Hostname = detectedDevice.Hostname;
            machine.LastIp = detectedDevice.LocalIP;
            machine.MacAddress = detectedDevice.MACAddress;
            machine.Vendor = detectedDevice.Vendor;
            await StardustCRUD.UpdateMachineAsync(machine);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                detectedDevice.LocalIP = LocalIP.Replace("-", ".");
                string[] splittedIp = detectedDevice.LocalIP.Split('.');
                if (splittedIp.Length != 4)
                    throw new Exception();
                iPAddress = IPAddress.Parse(detectedDevice.LocalIP);
                if (iPAddress == null)
                    throw new Exception();
            }
            catch (Exception)
            {
                detectedDevice.LocalIP = "Invalid IP";
                detectedDevice.Hostname = "N/A";
                detectedDevice.IsOnline = false;
                serviceColor = MudBlazor.Color.Secondary;
                _buttonDisabled = true;
                StateHasChanged();
                return;
            }


            await GetDatas();
            StateHasChanged();
            GraphWrapper graphWrapper = new(GraphClient);
            GraphUser = await graphWrapper.GetGraphUserByDeviceMacAddress(detectedDevice.MACAddress, detectedDevice);
            List<ManagedDevice?> managedDevices = await graphWrapper.GetAllManagedDevices();
            foreach (var managedDevice in managedDevices)
            {
                if (managedDevice == null)
                    continue;
                if (managedDevice?.WiFiMacAddress == detectedDevice.MACAddress)
                {
                    ManagedDevice = managedDevice;
                    break;
                }
            }
            if (ManagedDevice != null)
            {
                data = new double[] { (double)(ManagedDevice?.TotalStorageSpaceInBytes / 1e9 - ManagedDevice?.FreeStorageSpaceInBytes / 1e9), (double)(ManagedDevice?.FreeStorageSpaceInBytes / 1e9) };
                dataPercent = (double)(ManagedDevice?.TotalStorageSpaceInBytes / 1e9 - ManagedDevice?.FreeStorageSpaceInBytes / 1e9) / (double)(ManagedDevice?.TotalStorageSpaceInBytes / 1e9) * 100;
                dataPercent = Math.Round((double)dataPercent, 2);
            }
            URI = GraphUser != null ? $"/user/{GraphUser?.Id}" : "";
            StateHasChanged();
            await GetStatus();
            StateHasChanged();
            await DetectMachine();
            StateHasChanged();
            if (detectedDevice.Hostname != "N/A")
                await GetLastReports(detectedDevice.Hostname);
            machine = await StardustCRUD.GetMachineByHostnameAsync(detectedDevice.Hostname);
            if (machine == null || machine.Id == null)
            {
                StateHasChanged();
                return;
            }
            taskTodos = await StardustCRUD.GetTaskTodoByDeviceIdAsync(machine.Id);
            StateHasChanged();
        }
    }
}

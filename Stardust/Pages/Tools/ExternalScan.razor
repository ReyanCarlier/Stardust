@page "/tools/externalscan"
@using System.Diagnostics;
@using Stardust.Nmap;
@using System.Net;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using System.Xml;
@using Stardust.Nmap.Enums;
@using Stardust.Nmap.Class;
@using Stardust.Nmap.Enum;

<AuthorizeView>
    <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudPaper Elevation="4" Class="pa-4" Style="height: 50vh">
                    <MudText Class="justify-content-center"><MudIcon Icon="@Icons.Material.Filled.Warning"/>Only Scan domains and IPs you are explicity authorized to.<MudIcon Icon="@Icons.Material.Filled.Warning" /></MudText>
                    <EditForm Context="ScanTargetContext" Model="@ScanTarget" OnValidSubmit="AnalyzeIP">
                        <DataAnnotationsValidator />
                            <MudItem xs="12" sm="12">
                                <MudTextField Label="IP/Domain" @bind-Value="ScanTarget.IP" For="@(() => ScanTarget.IP)" />
                                <MudTextField Label="Starting Port" @bind-Value="ScanTarget.StartingPort" For="@(() => ScanTarget.StartingPort)" />
                                <MudTextField Label="Ending Port" @bind-Value="ScanTarget.EndingPort" For="@(() => ScanTarget.EndingPort)" />
                                <MudSelect @bind-Value="ScanTarget.ScanMethod" T="ScanMethod" Label="Scan Method">
                                    @foreach (ScanMethod method in Enum.GetValues(typeof(ScanMethod)))
                                    {
                                        <MudSelectItem Value="@method">@method</MudSelectItem>
                                    }
                                </MudSelect>
                            @if (_processing)
                            {
                                <MudButton StartIcon="@Icons.Material.Filled.WifiFind" Disabled="@_processing" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="m1-auto">
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Scanning...</MudText>
                                </MudButton>
                            }
                            else
                            {
                                <MudButton StartIcon="@Icons.Material.Filled.WifiFind" Disabled="@_processing" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="m1-auto">
                                    <MudText>Scan</MudText>
                                </MudButton>
                            }
                                        
                            @if (ScanReport != null)
                            {
                                <MudButton StartIcon="@Icons.Material.Filled.CloudDownload" Class="m1-auto" Variant="Variant.Filled" Color="Color.Primary" @onclick="DownloadRapport">Report</MudButton>
                            }
                            @if (ScannedPorts != null && ScannedPorts.Count > 0)
                            {
                                <MudButton StartIcon="@Icons.Material.Filled.BugReport" Class="m1-auto" Variant="Variant.Filled" Color="Color.Secondary" @onclick="DoNothing">Vulnerabilites</MudButton>
                            }
                            else if (ScanReport != null && ScannedPorts != null)
                            {
                                <MudButton Class="m1-auto cursor-not-allowed" Disabled="true">No vulnerability to search.</MudButton>
                            }
                            </MudItem>
                    </EditForm>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTable Elevation="4" Context="resultLine" Items="@resultLines" FixedHeader="true" Hover="true" Height="24vh">
                            <HeaderContent>
                                <MudTh>Results :</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="line">@resultLine</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTable Elevation="4" Context="errorLine" Items="@errorLines" FixedHeader="true" Hover="true" Height="23vh">
                            <HeaderContent>
                                <MudTh>Errors :</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="line">@errorLine</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudPaper Elevation="4" Class="pa-4" Style="height: 200px;"></MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudPaper Elevation="4" Class="pa-4" Style="height: 200px;"></MudPaper>
            </MudItem>
            <MudItem xs="12" sm="12" md="4">
                <MudPaper Elevation="4" Class="pa-4" Style="height: 200px;"></MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
</AuthorizeView>

@code {
    NmapScanPortsForm ScanTarget = new();
    public List<string> resultLines = new();
    public List<string> errorLines = new();
    public List<ScannedPort>? ScannedPorts { get; set; }
    public bool multiport { get; set; }
    public XmlDocument? ScanReport { get; set; } = null;
    private bool _processing = false;

    protected override void OnInitialized()
    {
        ScanTarget ??= new();
    }

    public async void DownloadRapport()
    {
        string Filename = $"{ScanTarget.IP}_{DateTime.Now.ToString("yyyy-MM-dd-hh-mm")}.xml";
        await JSRuntime.InvokeAsync<object>("saveFile", Filename, ScanReport?.InnerXml);
    }

    public void DoNothing()
{
        return;
    }

    public void ParseReport()
    {
        if (ScanReport == null)
            return;
        if (ScannedPorts != null)
            ScannedPorts.Clear();
        else
            ScannedPorts = new();
        XmlNodeList PortsNodeList = ScanReport.GetElementsByTagName("port");
        if (PortsNodeList.Count == 0)
            return;

        foreach (XmlNode portNode in PortsNodeList)
        {
            ScannedPort scannedPort = new();
            scannedPort.Port = portNode.SelectSingleNode("service")?.Attributes?["portid"]?.Value;
            scannedPort.DetectedUtility = portNode.Attributes?["protocol"]?.Value;

            switch (portNode.SelectSingleNode("state")?.Attributes?["state"]?.Value)
            {
                case "filtered":
                    scannedPort.Status = PortStatus.Filtered;
                    break;
                case "open":
                    scannedPort.Status = PortStatus.Open;
                    break;
                case "closed":
                    scannedPort.Status = PortStatus.Closed;
                    break;
                case "listening":
                    scannedPort.Status = PortStatus.Listening;
                    break;
                default:
                    scannedPort.Status = PortStatus.Closed;
                    break;
            }
            if (scannedPort.Status != PortStatus.Filtered && scannedPort.Status != PortStatus.Closed)
                ScannedPorts.Add(scannedPort);
        }
    }

    private bool CanAnalyzeIP()
    {
        resultLines.Clear();
        errorLines.Clear();

        if (ScanTarget == null || ScanTarget.IP == null)
            errorLines.Add("Target cannot be empty.");

        multiport = ScanTarget?.EndingPort > 0;
        if (multiport && ScanTarget?.EndingPort - ScanTarget?.StartingPort > 500)
            errorLines.Add("For performance issues, ports range cannot exceed 500 ports.");

        return errorLines.Count() == 0;
    }

    private async Task AnalyzeIP()
    {
        try
        {
            _processing = true;
            if (!CanAnalyzeIP())
            {
                ScanReport = null;
                ScannedPorts = null;
                return;
            }
            PortScanService service = new PortScanService();
            IPAddress testIP;
            try
            {
                testIP = IPAddress.Parse(ScanTarget.IP);
            }
            catch
            {
                if (!ScanTarget.IP.Contains("http"))
                    ScanTarget.IP = $"https://{ScanTarget.IP}";
                testIP = Dns.GetHostAddresses(new Uri(ScanTarget.IP).Host)[0];
            }

            if (multiport)
                await service.RunNmapScanPortsRangeAsync(ScanTarget.ScanMethod, testIP, ScanTarget.StartingPort, Convert.ToInt32(ScanTarget.EndingPort));
            else
                await service.RunNmapScanSinglePortAsync(ScanTarget.ScanMethod, testIP, ScanTarget.StartingPort);

            resultLines = service.GetResultLines();
            errorLines = service.GetErrorLines();
            string rawXML = string.Join(string.Empty, resultLines);
            ScanReport = new();
            ScanReport.LoadXml(rawXML);
            ParseReport();

            //resultLines.Clear();
        }
        catch (Exception ex)
        {
            errorLines.Add(ex.Message.ToString());
            ScanReport = null;
            StateHasChanged();
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }
}